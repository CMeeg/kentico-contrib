//--------------------------------------------------------------------------------------------------
// <auto-generated>
//
//     This code was generated by code generator tool.
//
//     To customize the code use your own partial class. For more info about how to use and customize
//     the generated code see the documentation at http://docs.kentico.com.
//
// </auto-generated>
//--------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

using CMS;
using CMS.Base;
using CMS.Helpers;
using CMS.DataEngine;
using CMS.DocumentEngine.Types.KenticoContrib;
using CMS.DocumentEngine;

[assembly: RegisterDocumentType(OpenGraphMetadata.CLASS_NAME, typeof(OpenGraphMetadata))]

namespace CMS.DocumentEngine.Types.KenticoContrib
{
	/// <summary>
	/// Represents a content item of type OpenGraphMetadata.
	/// </summary>
	public partial class OpenGraphMetadata : TreeNode
	{
		#region "Constants and variables"

		/// <summary>
		/// The name of the data class.
		/// </summary>
		public const string CLASS_NAME = "KenticoContrib.OpenGraphMetadata";


		/// <summary>
		/// The instance of the class that provides extended API for working with OpenGraphMetadata fields.
		/// </summary>
		private readonly OpenGraphMetadataFields mFields;

		#endregion


		#region "Properties"

		/// <summary>
		/// OpenGraphMetadataID.
		/// </summary>
		[DatabaseIDField]
		public int OpenGraphMetadataID
		{
			get
			{
				return ValidationHelper.GetInteger(GetValue("OpenGraphMetadataID"), 0);
			}
			set
			{
				SetValue("OpenGraphMetadataID", value);
			}
		}


		/// <summary>
		/// If this is left blank, the current page's page title will be used.
		/// </summary>
		[DatabaseField]
		public string OpenGraphMetadataTitle
		{
			get
			{
				return ValidationHelper.GetString(GetValue("OpenGraphMetadataTitle"), @"");
			}
			set
			{
				SetValue("OpenGraphMetadataTitle", value);
			}
		}


		/// <summary>
		/// If this is left blank, the current page's page description will be used.
		/// </summary>
		[DatabaseField]
		public string OpenGraphMetadataDescription
		{
			get
			{
				return ValidationHelper.GetString(GetValue("OpenGraphMetadataDescription"), @"");
			}
			set
			{
				SetValue("OpenGraphMetadataDescription", value);
			}
		}


		/// <summary>
		/// Type.
		/// </summary>
		[DatabaseField]
		public string OpenGraphMetadataType
		{
			get
			{
				return ValidationHelper.GetString(GetValue("OpenGraphMetadataType"), @"website");
			}
			set
			{
				SetValue("OpenGraphMetadataType", value);
			}
		}


		/// <summary>
		/// If this is left blank, the current site's display name will be used.
		/// </summary>
		[DatabaseField]
		public string OpenGraphMetadataSiteName
		{
			get
			{
				return ValidationHelper.GetString(GetValue("OpenGraphMetadataSiteName"), @"");
			}
			set
			{
				SetValue("OpenGraphMetadataSiteName", value);
			}
		}


		/// <summary>
		/// If this is left blank, the current page's URL will be used.
		/// </summary>
		[DatabaseField]
		public string OpenGraphMetadataUrl
		{
			get
			{
				return ValidationHelper.GetString(GetValue("OpenGraphMetadataUrl"), @"");
			}
			set
			{
				SetValue("OpenGraphMetadataUrl", value);
			}
		}


		/// <summary>
		/// Image.
		/// </summary>
		[DatabaseField]
		public string OpenGraphMetadataImage
		{
			get
			{
				return ValidationHelper.GetString(GetValue("OpenGraphMetadataImage"), @"");
			}
			set
			{
				SetValue("OpenGraphMetadataImage", value);
			}
		}


		/// <summary>
		/// Image alt text.
		/// </summary>
		[DatabaseField]
		public string OpenGraphMetadataImageAltText
		{
			get
			{
				return ValidationHelper.GetString(GetValue("OpenGraphMetadataImageAltText"), @"");
			}
			set
			{
				SetValue("OpenGraphMetadataImageAltText", value);
			}
		}


		/// <summary>
		/// Gets an object that provides extended API for working with OpenGraphMetadata fields.
		/// </summary>
		[RegisterProperty]
		public OpenGraphMetadataFields Fields
		{
			get
			{
				return mFields;
			}
		}


		/// <summary>
		/// Provides extended API for working with OpenGraphMetadata fields.
		/// </summary>
		[RegisterAllProperties]
		public partial class OpenGraphMetadataFields : AbstractHierarchicalObject<OpenGraphMetadataFields>
		{
			/// <summary>
			/// The content item of type OpenGraphMetadata that is a target of the extended API.
			/// </summary>
			private readonly OpenGraphMetadata mInstance;


			/// <summary>
			/// Initializes a new instance of the <see cref="OpenGraphMetadataFields" /> class with the specified content item of type OpenGraphMetadata.
			/// </summary>
			/// <param name="instance">The content item of type OpenGraphMetadata that is a target of the extended API.</param>
			public OpenGraphMetadataFields(OpenGraphMetadata instance)
			{
				mInstance = instance;
			}


			/// <summary>
			/// OpenGraphMetadataID.
			/// </summary>
			public int ID
			{
				get
				{
					return mInstance.OpenGraphMetadataID;
				}
				set
				{
					mInstance.OpenGraphMetadataID = value;
				}
			}


			/// <summary>
			/// If this is left blank, the current page's page title will be used.
			/// </summary>
			public string Title
			{
				get
				{
					return mInstance.OpenGraphMetadataTitle;
				}
				set
				{
					mInstance.OpenGraphMetadataTitle = value;
				}
			}


			/// <summary>
			/// If this is left blank, the current page's page description will be used.
			/// </summary>
			public string Description
			{
				get
				{
					return mInstance.OpenGraphMetadataDescription;
				}
				set
				{
					mInstance.OpenGraphMetadataDescription = value;
				}
			}


			/// <summary>
			/// Type.
			/// </summary>
			public string Type
			{
				get
				{
					return mInstance.OpenGraphMetadataType;
				}
				set
				{
					mInstance.OpenGraphMetadataType = value;
				}
			}


			/// <summary>
			/// If this is left blank, the current site's display name will be used.
			/// </summary>
			public string SiteName
			{
				get
				{
					return mInstance.OpenGraphMetadataSiteName;
				}
				set
				{
					mInstance.OpenGraphMetadataSiteName = value;
				}
			}


			/// <summary>
			/// If this is left blank, the current page's URL will be used.
			/// </summary>
			public string Url
			{
				get
				{
					return mInstance.OpenGraphMetadataUrl;
				}
				set
				{
					mInstance.OpenGraphMetadataUrl = value;
				}
			}


			/// <summary>
			/// Image.
			/// </summary>
			public string Image
			{
				get
				{
					return mInstance.OpenGraphMetadataImage;
				}
				set
				{
					mInstance.OpenGraphMetadataImage = value;
				}
			}


			/// <summary>
			/// Image alt text.
			/// </summary>
			public string ImageAltText
			{
				get
				{
					return mInstance.OpenGraphMetadataImageAltText;
				}
				set
				{
					mInstance.OpenGraphMetadataImageAltText = value;
				}
			}
		}

		#endregion


		#region "Constructors"

		/// <summary>
		/// Initializes a new instance of the <see cref="OpenGraphMetadata" /> class.
		/// </summary>
		public OpenGraphMetadata() : base(CLASS_NAME)
		{
			mFields = new OpenGraphMetadataFields(this);
		}

		#endregion
	}
}